-------------------------------------------------------------------------------
          Mongo-GLib - A Mongo Driver for GObject Based Applications
-------------------------------------------------------------------------------

This is a work-in-progress driver that uses GLib and GObject to implement
a Mongo driver and BSON reader and writer. It can be used via GObject
introspection, making it available to JavaScript via GJS, Python, Vala,
and many other languages[1].

[1]: https://live.gnome.org/GObjectIntrospection/Users


-------------------------------------------------------------------------------
   0: STUFF THAT IS MISSING
-------------------------------------------------------------------------------

Mongo-GLib currently lacks a lot of features. For example, the following needs
to be implemented in the short term.

  - Support for sort ordering.
  - Support for creating indexes.
  - Propagation of connection options such as write quorum, journaling,
    fsync, and various timeouts. It does however, always enforce safe=true.


-------------------------------------------------------------------------------
   I. INTRODUCTION
-------------------------------------------------------------------------------

Mongo-GLib works in an asynchronous fashion since most GObject-based
applications already use a main-loop such as GMainLoop. We have also taken
the philosophy that errors should always be reported. Therefore, you wont see
things like the "safe" parameter often seen in other drivers. We always call
getlasterror to check for an error. This is usually not an issue since we
pipeline the data and are asynchronous already.


-------------------------------------------------------------------------------
  II. CODE OVERVIEW
-------------------------------------------------------------------------------

The basic gist of using Mongo-GLib can be shown by the object design below.

  mongo-bson.h:        Routines for creating, reading, and traversing
                       BSON documents.
  mongo-bson-stream.h: Read and write files containing a sequential list
                       of BSON documents, such as those created by mongodump.
  mongo-client.h:      Primary object for accessing a remote Mongo server.
  mongo-collection.h:  Object representing a collection within a database.
  mongo-cursor.h:      Asynchronous database cursor for reading documents.
  mongo-database.h:    Object reprsenting a database on the Mongo server.
  mongo-manager.h:     Routines for managing what server to connect to next
                       in a replica set.
  mongo-object-id.h:   Routines for ObjectId's, a 12-byte object identifier.
  mongo-protocol.h:    Implementation of the Mongo wire protocol.

